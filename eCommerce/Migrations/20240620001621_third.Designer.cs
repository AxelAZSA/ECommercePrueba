// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Data;

#nullable disable

namespace eCommerce.Migrations
{
    [DbContext(typeof(DbEContext))]
    [Migration("20240620001621_third")]
    partial class third
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCommerce.Entitys.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("eCommerce.Entitys.Articulo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("articulos");
                });

            modelBuilder.Entity("eCommerce.Entitys.Carrito", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("idCliente")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idCliente")
                        .IsUnique();

                    b.ToTable("carritos");
                });

            modelBuilder.Entity("eCommerce.Entitys.CarritoItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("idArticulo")
                        .HasColumnType("int");

                    b.Property<int>("idCarrito")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idArticulo");

                    b.HasIndex("idCarrito");

                    b.ToTable("carritoItems");
                });

            modelBuilder.Entity("eCommerce.Entitys.Cliente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("eCommerce.Entitys.Compra", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCliente")
                        .HasColumnType("int");

                    b.Property<int>("idTienda")
                        .HasColumnType("int");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("idCliente");

                    b.HasIndex("idTienda");

                    b.ToTable("compras");
                });

            modelBuilder.Entity("eCommerce.Entitys.CompraItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("idArticulo")
                        .HasColumnType("int");

                    b.Property<int>("idCompra")
                        .HasColumnType("int");

                    b.Property<decimal>("subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("idArticulo");

                    b.HasIndex("idCompra");

                    b.ToTable("compraItems");
                });

            modelBuilder.Entity("eCommerce.Entitys.Stock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("fechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("idArticulo")
                        .HasColumnType("int");

                    b.Property<int>("idTienda")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idArticulo");

                    b.HasIndex("idTienda");

                    b.ToTable("stocks");
                });

            modelBuilder.Entity("eCommerce.Entitys.Tienda", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sucursal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tiendas");
                });

            modelBuilder.Entity("eCommerce.Entitys.Tokens.RefreshToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("idSesion")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("eCommerce.Entitys.imagenes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idArticulo")
                        .HasColumnType("int");

                    b.Property<byte[]>("imagen")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("idArticulo");

                    b.ToTable("imagenes");
                });

            modelBuilder.Entity("eCommerce.Entitys.Carrito", b =>
                {
                    b.HasOne("eCommerce.Entitys.Cliente", "cliente")
                        .WithOne("carrito")
                        .HasForeignKey("eCommerce.Entitys.Carrito", "idCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("eCommerce.Entitys.CarritoItem", b =>
                {
                    b.HasOne("eCommerce.Entitys.Articulo", "articulo")
                        .WithMany("items")
                        .HasForeignKey("idArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Entitys.Carrito", "carrito")
                        .WithMany("items")
                        .HasForeignKey("idCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("carrito");
                });

            modelBuilder.Entity("eCommerce.Entitys.Compra", b =>
                {
                    b.HasOne("eCommerce.Entitys.Cliente", "cliente")
                        .WithMany("compras")
                        .HasForeignKey("idCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Entitys.Tienda", "tienda")
                        .WithMany("compras")
                        .HasForeignKey("idTienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");

                    b.Navigation("tienda");
                });

            modelBuilder.Entity("eCommerce.Entitys.CompraItem", b =>
                {
                    b.HasOne("eCommerce.Entitys.Articulo", "articulo")
                        .WithMany("coItems")
                        .HasForeignKey("idArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Entitys.Compra", "compra")
                        .WithMany("items")
                        .HasForeignKey("idCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("compra");
                });

            modelBuilder.Entity("eCommerce.Entitys.Stock", b =>
                {
                    b.HasOne("eCommerce.Entitys.Articulo", "articulo")
                        .WithMany("stocks")
                        .HasForeignKey("idArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Entitys.Tienda", "tienda")
                        .WithMany("stocks")
                        .HasForeignKey("idTienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("tienda");
                });

            modelBuilder.Entity("eCommerce.Entitys.imagenes", b =>
                {
                    b.HasOne("eCommerce.Entitys.Articulo", "articulo")
                        .WithMany("imagenes")
                        .HasForeignKey("idArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");
                });

            modelBuilder.Entity("eCommerce.Entitys.Articulo", b =>
                {
                    b.Navigation("coItems");

                    b.Navigation("imagenes");

                    b.Navigation("items");

                    b.Navigation("stocks");
                });

            modelBuilder.Entity("eCommerce.Entitys.Carrito", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("eCommerce.Entitys.Cliente", b =>
                {
                    b.Navigation("carrito");

                    b.Navigation("compras");
                });

            modelBuilder.Entity("eCommerce.Entitys.Compra", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("eCommerce.Entitys.Tienda", b =>
                {
                    b.Navigation("compras");

                    b.Navigation("stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
